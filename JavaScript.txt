1. JAVA와 JAVA Script 다르다
2. JAVA Script로 할 수 있는 것들
    1. 웹 클라이언트(서비스를 제공받는) [HTML, CSS, JS] (2009년 이후 node.js출시로 가능)
    2. 웹 서버[node.js] (서비스를 제공하는)
    3. 모바일 [react native]
    4. 데스크톱 애플리케이션 [NW.js] VS JAVA(spring)
    5. 데이터베이스 관리 [NOSQL] VS SQL
3. 텍스트 에디터
    1. 프론트엔드: VScode, 아톰(회사 자유)
    2. 백엔드 : 이클립스, IntelliJ (인텔리제이)등
4. 브라우저[클라이언트 입장]
    1. 크롬, 엣지, 사파리 등
5. 크롬창 F12번 console의 오류 내용확인(빨간색 밑줄 표시)
6. ***** 줄바꿈(들여쓰기)반드시 할것 *****
7. 식별자 규칙
    1. 키워드를 사용하면 안 된다.
    2. 숫자로 시작하면 안된다.
    3. 특수문자는_와$만 사용가능하다.
    4. 공백 문자를 포함할 수 없다.
8. 식별자를  만들 때 관례
    1. 알파벳을 사용하는게 좋음
    2. 의미가 담긴 단어를 사용하는게 좋음
    3. 클래스의 이름은 항상 대문자 시작
9. 주석: /* */ , //(한줄)
10. 기본 용어
    1. 부호: (모스부호[짧은신호 또는 긴신호] >전기상태[있다 또는 없다] >이진수[0 또는 1])
    2. 코드: 정보를 다른 형태로 변환하는 규칙 [문법, 도구]
        1. java, html, css, js python
    3. 표현식: 하나 이상의 값/정보로 표현될 수 있는 코드를 의미 
    4. 문장: 표현식 한 개 이상 모인 것(명령문) 
    5. 프로그램: 문장이 모인 것(명령문의 집합)
    6. 프로세스: 현재 실행중인 프로그램(스케줄링/스레드)
    7. 웹 애플리케이션:  웹에서 사용하는 프로그램
    8. 응용프로그램: 사용자가 사용할 수 있도록 만든 프로그램(애플리케이션)
    
11. 부호 > 코드 > 표현식 > 문장 > 프로그램 
12. 사용처 따라
    1. 웹 애플리케이션 (프로세스)
    2. 앱 애플리케이션 (프로세스)
    3. 데스크탑 애플리케이션 (프로세스)


개발자/ 사람                              컴퓨터
<div>---------------명령어-------------> [번역]0101010101010

박스모델            <------------실행결과------------>

consol("안녕)---------------명령어------------> [번역]01011011101011111

-키워드 : 언어들이 미리 만든 (기능이 들어간) 단어들/
    !!: 키워드와 동일하게 이름을 정의하지 말자!! [중복문제]

-식별자 : 어떠한 변수/함수/명령등을 식별하기 위한 이름
    HTML/CSS : id, class, <마크업>
    JS: 변수/함수/클래스 등등
    1. 키워드 사용불가 2. 숫자시작불가 3. 특수문자는_,&만 가능 4. 공백불가능
    영어 권장(카멜 표기법), 의미있는이름

-주석: 코드 설명
    HTML: <!--주석-->
    CSS: /* 주석 */ 
    JS:
        1. 한줄주석: // 한줄 주석
        2. 여러줄 주석: /* 여러줄 주석*/

-HTML에서 JAVAScript 적용하는 방법
    1. <script> 마크업을 이용한 스크립트 작성
    2. <head> 또는 <body>가장 하단에<script> 마크업에 .js파일을 불러오기



1. 입출력 방법 [*2/6]
    1. alert("출력하고 싶은 문구")                              : 경고창(확인버튼) 출력함수
    2. console.log("출력하고 싶은 문구)                         : console(f12개발자도구) 출력함수
    3. confirm("출력하고 싶은 문구")                            : 확인창(확인= true/취소=false)버튼 출력함수
    4. prompt("출력하고 싶은 문구")                             : 입력상자(input, 확인=true/취소=false) 입력
    5. document.write("HTML"에 출력하고 싶은 문구)              : HTML 출력 함수
    6. document.특정식별자.html = "HTML에 출력하고 싶은 문구"    : 특정 요소/마크업에 출력함수

2. 기본 자료형
    -자료: 프로그램이 처리할 수 있는 모든 것
    -자료형: 자료 형태/모양/폼 나눠 놓은 것 [이유: 공간낭비를 줄이기 위해서(효율성)]
        1. 숫자(number) 2. 문자열(string) 3.불(boolean)

            1.슷자와 문자열 구분
            273 vs "273" 다르다.

        2. 불
            true or false

        3.문자열      
            1. 문자열 표현방법 : '문자열' 또는 "문자열" 
                주의할점: 1. '문자열" 불가능
                         2. "'" 가능
                         3. '"' 가능
            2. 이스케이프/제어 문자
                1. \n: 줄바꿈
                2. \t: 들여쓰기
                3. \\: 백슬래쉬 출력
                 그외 \", \' 연산자 출력시

        3. 문자열 연산자
                문자열 + 문자열: 문자열 연결 연산자["문자열" + "문자열"]
                [인덱스번호] : 문자열에서 인덱스(순서) 번쨰 문자 추출
                    -인덱스 : 저장된 순서번호 = 인덱스 0번 시작
                    [0][1][2][3][4]

                    '안녕하세요'[0] : 해당 문자열내 0번째 문자 > 안
                문자열.length: 문자열 내 문자 개수
                '안녕하세요' .length: 해당 문자열내 문자 개수 > 5


3. 연산자[연산/계산/논리 시 사용되는 특수문자]
    1. 산술 연산자: 결과값 출력
        + 더하기 - 빼기 * 곱하기 / 나누기 % 나머지
        몫 구하기
        parseInt
    2. 연결 연산자 : + 연결연산자
        숫자 + 숫자[더하기]
        숫자 + '문자열' [연결]
        '문자열' + '문자열'[연결]

    3. 비교연산자 : 비교후 true/참 혹은 false/거짓 반환
        > 초과 / 크다          < 미만 / 작다
        >= 이상 / 크거나 같다  <= 이하 / 작거나 같다
        ==같다[데이터비교]     ===같다[데이터/자료형 강력비교]
        != 같지않다     !== 같지않다 

    4. 관계 연산자: 주로 비교연산자를 2개 이상 사용할 때 true/참 혹은 false/거짓 반환
        && 이면서 면서 이고 모두 그리고 and조건         [모두 참이면 참]


        || 이거나 거나 또는 하나라도 or조건             [하나라도 참이면 참]


        | 반대 부정 not조건                            [참[t] >거짓[f] / 거짓[f] > 참[t]]


        *| 특수문자: shift + \(엔터위에 백슬래쉬)

    5. 증감연산자: 1증가 혹은 1감소
        ++  1증가 [++변수: 전위증가, 변수++: 후위증가]
        --  1감소 [--변수: 전위감소, 변수--: 후위감소]

    6. 대입연산자: 오른쪽 데이터를 왼쪽에 넣어주기/대입
        = 대입   [변수=10;   10이라는 데이터를 변수에 넣어주기/대입/저장]
        +=      오른쪽 데이터를 왼쪽값과 더한후에 왼쪽에 대입
        -=, *=, /=, %=, 등등

    7. 삼항연산자:
        조건 ? 참:거짓
            -조건: 비교/관계 연산자
            -참: true 대신 하고 싶은 코드
            -거짓: false 대신 하고 싶은 코드
        
-연산 관련 함수들
    1. parseInt()       : 정수로 변환
    2. typeof()         : 자료형 검사
    3. Number()         : 숫자자료형으로 변환하는 함수
    4. String()         : 문자자료형으로 변환하는 함수
    5. Boolean()        : 불 자료형으로 변환하는 함수
    6. isNaN()          : 만약에 자료가 문자열이면 true 숫자면 false

-문자열 관련된 함수들
    1. 문자열.length :문자열 길이
    2. 문자열.split("분리기준문자"): 분리기준문자 기준으로 분리후 분리된 자료들을 배열로 반환
        "강호동/유재석/신동엽".split("/")   :   /기준으로 분리
        "강호동" "유재석" "신동엽"  : 자료 3개
        ["강호동", "유재석", "신동엽"]  (배열 자료1개)
    

-***** 탬플릿 문자열
    백틱을 이용한 문자열과 데이터 표현
    1. 전체를 백틱으로 감싼다.
    2. 데이터를 표현할 위치에 ${데이터}


-상수와 변수
    
    메모리: 주기억장치[현재실행중인메모리], 보조기억장치[영구저장용메모리]
        -컴퓨터가 데이터를 저장하는 공간

        JS, JAVA, python, c 언어 등 프로그래밍 코드 언어들을 개발자를 위해서 하드웨어 값을 저장할 수 있도록
        -html, css 없음
        저장하는 이유: 반복사용

        상수/변수 1개의 자료[숫자, 문자열, 불]를 저장/가지고 있는 상자

    상수: 항상 같은 수
        - 한번 값을 넣으면 수정할 수 없습니다.
        - const : 상수 선언하는 의미를 담고있는 키워드

    변수: 변할 수 있는 수
        - 값을 계속 변경할 수 있습니다.
        - var 또는 let: 변수 선언하는 의미 담고 있는 키워드

    -변수/상수 만들기
        1. 키워듸 const, let
        2. 식별이름 : 변수/상수명 정하기[중복없이]
        3. =: 대입
        4. 초기값

    -변수/상수 값 호출
        -변수명 또는 상수명 작성하면 변수 또는 상수내 값 변환
        변수/상수 명

    -변수 값 변경
    변수명= 새로운 값

    -변수/상수 값 연산
        변수/상수명 +10

-제어문(조건문)
    -주어진 조건의 만족 여부에 따라 선택적으로 실행하고자 할때 사용.
    -형태
    1.if
        1. 참일때만
            if(조건){}
        2. 참/ 거짓
            if(조건){
            else{}
            }
        3. 중첩
            if(조건){
            if(조건){}
            else{}
            }else{
                if(조건){}
                else{}
            }
        4. 다수조건
            if(조건1){}
            else if(조건2){}
            else if(조건3){}
            else if(조건4){}
            else{}

            조건 만족에 따라 () 한번만 실행 
        VS ======================  
            조건 만족에 따라 () 여러번 실행

            if(조건1){}
            if(조건2){}
            if(조건3){}
            if(조건4){}
    2. switch
        -default, break

-키워드
    break : switch, 반복문(for, while) {} 탈출
    return: 함수{} 탈출/ 종료 
    - 1. 형태
            switch (자료){
                case 조건A: 실행코드; break;
                case 조건B: 실행코드; break;
                case 조건C: 실행코드; break;
                default: break;
            }

-배열
    -여러 자료를 묶어서 활용할 수 있는 특수한 자료
    -형태
        -let 변수/상수명 = []
    -여러 개의 변수를 한 번에 선언해 다룰 수 있는 자료형
        -[]사용
        -내부 값을, 로구분
        -내부 값을 요소[element]
    1.배열 선언
        -let 변수/상수명 = [요소, 요소, 요소]
            -요소란? 배열내 들어간 자료(1.숫자 2.불 3.문자열 4.배열 5.함수 6.객체)

    2.배열 요소에 접근
        -인덱스란 ???배열내 요소들이 저장된 순서번호
            0부터시작(length/size는 1부터시작)
        -형태
            변수명[인덱스]

    3.배열 요소 개수 확인
        배열.length
    
    4. 배열 뒷부분에 요소 추가하기
        -마지막 삽입
            배열.push(추가할 요소);
        -중간(특정위치)삽입
            배열.splice(중간삽입할 요소의 인덱스위치,0, 추가할 요소의 값)
    
    5. 배열 요소 제거하기
        -인덱스 이용한 삭제
            배열.splice(제거할 요소의 인덱스, 제거할 요소의 개수)
                -배열.splice(3, 1)  : 3번 인덱스부터 1개 삭제
                -배열.splice(3, 3)  : 3번 인덱스부터 3개 삭제
                -배열.splice(0) : 배열 요소전부삭제
        -값을 이용한 삭제
             배열.splice(배열.indexof(값),1)
             -if(배열.indexOf(값)>=0){}
                만약에 배열내 값이 존재하면.

    6.배열내 요소 찾기
        배열/indexof(값);
            -배열내 동일한 값이 있으면 인덱스번호[0이상] 반환 없으면 -1

-지역변수 특징
    -선언된 위치{} 에 따라 변수 사용 여부 판단.
        -1. {} 안에서 선언된 변수/상수는 해당{} 밖에서 사용이 불가능하다.
        -2. {} 안에서 선언된 변수/상수는 해당{} 안에 하위{}안에는 들어갈 수 있다.